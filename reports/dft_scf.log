Traceback (most recent call last):
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/miniconda3/envs/echem/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
den_drv = vlx.veloxchemlib.DensityGridDriver()
xctype = 'LDA' # generate densities but no gradients of densities

def LDA_exchange(D):
    
    F_xc = np.zeros((nbas,nbas))

    den_array_format = np.array([D, D])
    den_cpp_format = vlx.veloxchemlib.AODensityMatrix(den_array_format, vlx.veloxchemlib.denmat.rest)
    den_grid = den_drv.generate(den_cpp_format, molecule, basis, mol_grid, xctype)
    den_alpha = den_grid.density_aa_to_numpy(0)
    den_beta  = den_grid.density_bb_to_numpy(0)
    
    n = den_alpha + den_beta # density on the molecular grid
    
    e_xc = - 0.75 * (3 / np.pi)**(1/3) * n**(1/3)
    E_xc = np.dot(weights, n * e_xc)
    
    v_xc = - (3 / np.pi)**(1/3) * n**(1/3)
        
    D = np.zeros((nbas,nbas)) # auxiliary density matrix for orbital pairs
    
    for alpha in range(nbas):
        for beta in range(alpha, nbas):

            D[alpha, beta] = 1.0

            den_array_format = np.array([D, D])
            den_cpp_format = vlx.veloxchemlib.AODensityMatrix(den_array_format, vlx.veloxchemlib.denmat.rest)
            den_grid = den_drv.generate(den_cpp_format, molecule, basis, mol_grid, xctype)
            den_ao_pair = den_grid.density_aa_to_numpy(0)

            F_xc[alpha,beta] = np.dot(weights, v_xc * den_ao_pair)
            F_xc[beta,alpha] = F_xc[alpha,beta]
        
            D[alpha, beta] = 0.0

    return F_xc, E_xc
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [7][0m, in [0;36m<cell line: 1>[0;34m()[0m
[0;32m----> 1[0m den_drv [38;5;241m=[39m [43mvlx[49m[38;5;241;43m.[39;49m[43mveloxchemlib[49m[38;5;241;43m.[39;49m[43mDensityGridDriver[49m[43m([49m[43m)[49m
[1;32m      2[0m xctype [38;5;241m=[39m [38;5;124m'[39m[38;5;124mLDA[39m[38;5;124m'[39m [38;5;66;03m# generate densities but no gradients of densities[39;00m
[1;32m      4[0m [38;5;28;01mdef[39;00m [38;5;21mLDA_exchange[39m(D):

[0;31mTypeError[0m: __init__(): incompatible constructor arguments. The following argument types are supported:
    1. veloxchem.veloxchemlib.DensityGridDriver(comm: object)

Invoked with: 
TypeError: __init__(): incompatible constructor arguments. The following argument types are supported:
    1. veloxchem.veloxchemlib.DensityGridDriver(comm: object)

Invoked with: 

