Traceback (most recent call last):
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/miniconda3/envs/echem/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/echem/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
basis = vlx.MolecularBasis.read(molecule, "def2-svpd")
scf_drv.compute(molecule, basis) # perform an SCF optimization

den_drv = vlx.veloxchemlib.DensityGridDriver()

den_mats = scf_drv.scf_tensors['D'] # tuple of (alpha, beta) spin densities
den_array_format = np.array([den_mats[0], den_mats[1]])
den_cpp_format = vlx.veloxchemlib.AODensityMatrix(den_array_format, vlx.veloxchemlib.denmat.rest)

xctype = 'LDA' # generate densities but no gradients of densities
    
n_grid_points = []
n_elec = []

for grid_level in range(1,7):

    grid_drv.set_level(grid_level) # available grid levels are between 1-6

    # generate grid points and weights for molecule
    mol_grid = grid_drv.generate(molecule)
    weights = mol_grid.w_to_numpy()
    n_grid_points.append(mol_grid.number_of_points())

    # generate density on grid
    den_grid = den_drv.generate(den_cpp_format, molecule, basis, mol_grid, xctype)
    den_alpha = den_grid.density_aa_to_numpy(0)
    den_beta  = den_grid.density_bb_to_numpy(0)

    n_elec.append(np.dot(weights, den_alpha) + np.dot(weights, den_beta))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [7][0m, in [0;36m<cell line: 4>[0;34m()[0m
[1;32m      1[0m basis [38;5;241m=[39m vlx[38;5;241m.[39mMolecularBasis[38;5;241m.[39mread(molecule, [38;5;124m"[39m[38;5;124mdef2-svpd[39m[38;5;124m"[39m)
[1;32m      2[0m scf_drv[38;5;241m.[39mcompute(molecule, basis) [38;5;66;03m# perform an SCF optimization[39;00m
[0;32m----> 4[0m den_drv [38;5;241m=[39m [43mvlx[49m[38;5;241;43m.[39;49m[43mveloxchemlib[49m[38;5;241;43m.[39;49m[43mDensityGridDriver[49m[43m([49m[43m)[49m
[1;32m      6[0m den_mats [38;5;241m=[39m scf_drv[38;5;241m.[39mscf_tensors[[38;5;124m'[39m[38;5;124mD[39m[38;5;124m'[39m] [38;5;66;03m# tuple of (alpha, beta) spin densities[39;00m
[1;32m      7[0m den_array_format [38;5;241m=[39m np[38;5;241m.[39marray([den_mats[[38;5;241m0[39m], den_mats[[38;5;241m1[39m]])

[0;31mTypeError[0m: __init__(): incompatible constructor arguments. The following argument types are supported:
    1. veloxchem.veloxchemlib.DensityGridDriver(comm: object)

Invoked with: 
TypeError: __init__(): incompatible constructor arguments. The following argument types are supported:
    1. veloxchem.veloxchemlib.DensityGridDriver(comm: object)

Invoked with: 

