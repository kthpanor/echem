Traceback (most recent call last):
  File "/opt/miniconda3/envs/echem/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/miniconda3/envs/echem/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/miniconda3/envs/echem/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/miniconda3/envs/echem/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/miniconda3/envs/echem/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/envs/echem/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/echem/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# empty list to save the energies, gradients and hessians
energies = []
cart_gradients = []
cart_hessians = []

# list for molecular configurations
molecules = []

for oh in distlist:
    print("Calculating the energies, gradients and Hessians for OH = ", oh, "A...")

    # Create new molecule
    mol_str = mol_template.replace("OHdist", str(oh))
    new_molecule = vlx.Molecule.read_molecule_string(mol_str, units="angstrom")

    # set-up an scf driver
    new_scf_drv = vlx.ScfRestrictedDriver()
    new_scf_drv.ostream.mute()
    new_scf_results = new_scf_drv.compute(new_molecule, basis)

    # calculate the gradient
    new_scf_grad_drv = vlx.ScfGradientDriver()
    new_scf_grad_drv.ostream.state = False
    new_scf_grad_drv.compute(new_molecule, basis, new_scf_drv)

    # calculate the Hessian
    new_scf_hessian_drv = vlx.ScfHessianDriver()
    new_scf_hessian_drv.ostream.state = False
    new_scf_hessian_drv.compute(new_molecule, basis, new_scf_drv)

    # save the results:
    energy = new_scf_drv.get_scf_energy()
    cart_gradient = new_scf_grad_drv.gradient
    cart_hessian = new_scf_hessian_drv.hessian

    energies.append(energy)
    cart_gradients.append(cart_gradient)
    cart_hessians.append(cart_hessian)
    molecules.append(new_molecule)
------------------

----- stdout -----
Calculating the energies, gradients and Hessians for OH =  0.75 A...
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[16], line 22[0m
[1;32m     19[0m new_scf_results [38;5;241m=[39m new_scf_drv[38;5;241m.[39mcompute(new_molecule, basis)
[1;32m     21[0m [38;5;66;03m# calculate the gradient[39;00m
[0;32m---> 22[0m new_scf_grad_drv [38;5;241m=[39m [43mvlx[49m[38;5;241;43m.[39;49m[43mScfGradientDriver[49m[43m([49m[43m)[49m
[1;32m     23[0m new_scf_grad_drv[38;5;241m.[39mostream[38;5;241m.[39mstate [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[1;32m     24[0m new_scf_grad_drv[38;5;241m.[39mcompute(new_molecule, basis, new_scf_drv)

[0;31mTypeError[0m: ScfGradientDriver.__init__() missing 1 required positional argument: 'scf_drv'

